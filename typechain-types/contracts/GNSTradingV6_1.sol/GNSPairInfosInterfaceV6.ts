/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface GNSPairInfosInterfaceV6Interface extends utils.Interface {
  functions: {
    "getTradeLiquidationPrice(address,uint256,uint256,uint256,bool,uint256,uint256)": FunctionFragment;
    "getTradePriceImpact(uint256,uint256,bool,uint256)": FunctionFragment;
    "getTradeValue(address,uint256,uint256,bool,uint256,uint256,int256,uint256)": FunctionFragment;
    "maxNegativePnlOnOpenP()": FunctionFragment;
    "storeTradeInitialAccFees(address,uint256,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getTradeLiquidationPrice"
      | "getTradePriceImpact"
      | "getTradeValue"
      | "maxNegativePnlOnOpenP"
      | "storeTradeInitialAccFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTradeLiquidationPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradePriceImpact",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeValue",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxNegativePnlOnOpenP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storeTradeInitialAccFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTradeLiquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradePriceImpact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxNegativePnlOnOpenP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeTradeInitialAccFees",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GNSPairInfosInterfaceV6 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GNSPairInfosInterfaceV6Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTradeLiquidationPrice(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradePriceImpact(
      openPrice: PromiseOrValue<BigNumberish>,
      pairIndex: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      openInterest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        priceImpactP: BigNumber;
        priceAfterImpact: BigNumber;
      }
    >;

    getTradeValue(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      percentProfit: PromiseOrValue<BigNumberish>,
      closingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxNegativePnlOnOpenP(overrides?: CallOverrides): Promise<[BigNumber]>;

    storeTradeInitialAccFees(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getTradeLiquidationPrice(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    openPrice: PromiseOrValue<BigNumberish>,
    long: PromiseOrValue<boolean>,
    collateral: PromiseOrValue<BigNumberish>,
    leverage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradePriceImpact(
    openPrice: PromiseOrValue<BigNumberish>,
    pairIndex: PromiseOrValue<BigNumberish>,
    long: PromiseOrValue<boolean>,
    openInterest: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      priceImpactP: BigNumber;
      priceAfterImpact: BigNumber;
    }
  >;

  getTradeValue(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    long: PromiseOrValue<boolean>,
    collateral: PromiseOrValue<BigNumberish>,
    leverage: PromiseOrValue<BigNumberish>,
    percentProfit: PromiseOrValue<BigNumberish>,
    closingFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxNegativePnlOnOpenP(overrides?: CallOverrides): Promise<BigNumber>;

  storeTradeInitialAccFees(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    long: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getTradeLiquidationPrice(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradePriceImpact(
      openPrice: PromiseOrValue<BigNumberish>,
      pairIndex: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      openInterest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        priceImpactP: BigNumber;
        priceAfterImpact: BigNumber;
      }
    >;

    getTradeValue(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      percentProfit: PromiseOrValue<BigNumberish>,
      closingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxNegativePnlOnOpenP(overrides?: CallOverrides): Promise<BigNumber>;

    storeTradeInitialAccFees(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getTradeLiquidationPrice(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradePriceImpact(
      openPrice: PromiseOrValue<BigNumberish>,
      pairIndex: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      openInterest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeValue(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      percentProfit: PromiseOrValue<BigNumberish>,
      closingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxNegativePnlOnOpenP(overrides?: CallOverrides): Promise<BigNumber>;

    storeTradeInitialAccFees(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTradeLiquidationPrice(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradePriceImpact(
      openPrice: PromiseOrValue<BigNumberish>,
      pairIndex: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      openInterest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeValue(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      percentProfit: PromiseOrValue<BigNumberish>,
      closingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxNegativePnlOnOpenP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storeTradeInitialAccFees(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
