/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace StorageInterfaceV5 {
  export type TradeStruct = {
    trader: PromiseOrValue<string>;
    pairIndex: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    initialPosToken: PromiseOrValue<BigNumberish>;
    positionSizeDai: PromiseOrValue<BigNumberish>;
    openPrice: PromiseOrValue<BigNumberish>;
    buy: PromiseOrValue<boolean>;
    leverage: PromiseOrValue<BigNumberish>;
    tp: PromiseOrValue<BigNumberish>;
    sl: PromiseOrValue<BigNumberish>;
  };

  export type TradeStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    trader: string;
    pairIndex: BigNumber;
    index: BigNumber;
    initialPosToken: BigNumber;
    positionSizeDai: BigNumber;
    openPrice: BigNumber;
    buy: boolean;
    leverage: BigNumber;
    tp: BigNumber;
    sl: BigNumber;
  };

  export type PendingMarketOrderStruct = {
    trade: StorageInterfaceV5.TradeStruct;
    block: PromiseOrValue<BigNumberish>;
    wantedPrice: PromiseOrValue<BigNumberish>;
    slippageP: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type PendingMarketOrderStructOutput = [
    StorageInterfaceV5.TradeStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    trade: StorageInterfaceV5.TradeStructOutput;
    block: BigNumber;
    wantedPrice: BigNumber;
    slippageP: BigNumber;
    tokenId: BigNumber;
  };
}

export interface GNSTradingV6_1Interface extends utils.Interface {
  functions: {
    "cancelOpenLimitOrder(uint256,uint256)": FunctionFragment;
    "closeTradeMarket(uint256,uint256)": FunctionFragment;
    "closeTradeMarketTimeout(uint256)": FunctionFragment;
    "done()": FunctionFragment;
    "executeCancelOpenLimitOrder(uint256,uint256,address)": FunctionFragment;
    "executeCloseTradeMarket(uint256,uint256,address)": FunctionFragment;
    "executeLimitOrder(uint256,address,uint256,uint256)": FunctionFragment;
    "executeOpenTrade((address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256),uint8,uint256,address,address)": FunctionFragment;
    "executeTradeOrder(uint256,uint8,address,uint256,uint256)": FunctionFragment;
    "getTotalUsers()": FunctionFragment;
    "isDone()": FunctionFragment;
    "isPaused()": FunctionFragment;
    "limitOrdersTimelock()": FunctionFragment;
    "marketOrdersTimeout()": FunctionFragment;
    "maxPosDai()": FunctionFragment;
    "openTrade((address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256),uint8,uint256,address)": FunctionFragment;
    "openTradeMarketTimeout(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "setLimitOrdersTimelock(uint256)": FunctionFragment;
    "setMarketOrdersTimeout(uint256)": FunctionFragment;
    "setMaxPosDai(uint256)": FunctionFragment;
    "totalUsers(uint256)": FunctionFragment;
    "updateOpenLimitOrder(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateSl(uint256,uint256,uint256)": FunctionFragment;
    "updateStorage(address)": FunctionFragment;
    "updateTp(uint256,uint256,uint256)": FunctionFragment;
    "user(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelOpenLimitOrder"
      | "closeTradeMarket"
      | "closeTradeMarketTimeout"
      | "done"
      | "executeCancelOpenLimitOrder"
      | "executeCloseTradeMarket"
      | "executeLimitOrder"
      | "executeOpenTrade"
      | "executeTradeOrder"
      | "getTotalUsers"
      | "isDone"
      | "isPaused"
      | "limitOrdersTimelock"
      | "marketOrdersTimeout"
      | "maxPosDai"
      | "openTrade"
      | "openTradeMarketTimeout"
      | "pause"
      | "setLimitOrdersTimelock"
      | "setMarketOrdersTimeout"
      | "setMaxPosDai"
      | "totalUsers"
      | "updateOpenLimitOrder"
      | "updateSl"
      | "updateStorage"
      | "updateTp"
      | "user"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelOpenLimitOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTradeMarket",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTradeMarketTimeout",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "done", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeCancelOpenLimitOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCloseTradeMarket",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeLimitOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOpenTrade",
    values: [
      StorageInterfaceV5.TradeStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTradeOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isDone", values?: undefined): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "limitOrdersTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketOrdersTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxPosDai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openTrade",
    values: [
      StorageInterfaceV5.TradeStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openTradeMarketTimeout",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setLimitOrdersTimelock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketOrdersTimeout",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPosDai",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOpenLimitOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSl",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStorage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTp",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "user",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeTradeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeTradeMarketTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "done", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeCancelOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCloseTradeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOpenTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTradeOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDone", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "limitOrdersTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketOrdersTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxPosDai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openTradeMarketTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLimitOrdersTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketOrdersTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPosDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateSl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "user", data: BytesLike): Result;

  events: {
    "AddressUpdated(string,address)": EventFragment;
    "ChainlinkCallbackTimeout(uint256,tuple)": EventFragment;
    "CouldNotCloseTrade(address,uint256,uint256)": EventFragment;
    "Done(bool)": EventFragment;
    "MarketOrderInitiated(address,uint256,bool,uint256)": EventFragment;
    "NumberUpdated(string,uint256)": EventFragment;
    "OpenLimitCanceled(address,uint256,uint256)": EventFragment;
    "OpenLimitPlaced(address,uint256,uint256)": EventFragment;
    "OpenLimitUpdated(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Paused(bool)": EventFragment;
    "SlUpdateInitiated(address,uint256,uint256,uint256,uint256)": EventFragment;
    "SlUpdated(address,uint256,uint256,uint256)": EventFragment;
    "TpUpdated(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkCallbackTimeout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CouldNotCloseTrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Done"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketOrderInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NumberUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenLimitCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenLimitPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlUpdateInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TpUpdated"): EventFragment;
}

export interface AddressUpdatedEventObject {
  name: string;
  a: string;
}
export type AddressUpdatedEvent = TypedEvent<
  [string, string],
  AddressUpdatedEventObject
>;

export type AddressUpdatedEventFilter = TypedEventFilter<AddressUpdatedEvent>;

export interface ChainlinkCallbackTimeoutEventObject {
  orderId: BigNumber;
  order: StorageInterfaceV5.PendingMarketOrderStructOutput;
}
export type ChainlinkCallbackTimeoutEvent = TypedEvent<
  [BigNumber, StorageInterfaceV5.PendingMarketOrderStructOutput],
  ChainlinkCallbackTimeoutEventObject
>;

export type ChainlinkCallbackTimeoutEventFilter =
  TypedEventFilter<ChainlinkCallbackTimeoutEvent>;

export interface CouldNotCloseTradeEventObject {
  trader: string;
  pairIndex: BigNumber;
  index: BigNumber;
}
export type CouldNotCloseTradeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CouldNotCloseTradeEventObject
>;

export type CouldNotCloseTradeEventFilter =
  TypedEventFilter<CouldNotCloseTradeEvent>;

export interface DoneEventObject {
  done: boolean;
}
export type DoneEvent = TypedEvent<[boolean], DoneEventObject>;

export type DoneEventFilter = TypedEventFilter<DoneEvent>;

export interface MarketOrderInitiatedEventObject {
  trader: string;
  pairIndex: BigNumber;
  open: boolean;
  orderId: BigNumber;
}
export type MarketOrderInitiatedEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber],
  MarketOrderInitiatedEventObject
>;

export type MarketOrderInitiatedEventFilter =
  TypedEventFilter<MarketOrderInitiatedEvent>;

export interface NumberUpdatedEventObject {
  name: string;
  value: BigNumber;
}
export type NumberUpdatedEvent = TypedEvent<
  [string, BigNumber],
  NumberUpdatedEventObject
>;

export type NumberUpdatedEventFilter = TypedEventFilter<NumberUpdatedEvent>;

export interface OpenLimitCanceledEventObject {
  trader: string;
  pairIndex: BigNumber;
  index: BigNumber;
}
export type OpenLimitCanceledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OpenLimitCanceledEventObject
>;

export type OpenLimitCanceledEventFilter =
  TypedEventFilter<OpenLimitCanceledEvent>;

export interface OpenLimitPlacedEventObject {
  trader: string;
  pairIndex: BigNumber;
  index: BigNumber;
}
export type OpenLimitPlacedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OpenLimitPlacedEventObject
>;

export type OpenLimitPlacedEventFilter = TypedEventFilter<OpenLimitPlacedEvent>;

export interface OpenLimitUpdatedEventObject {
  trader: string;
  pairIndex: BigNumber;
  index: BigNumber;
  newPrice: BigNumber;
  newTp: BigNumber;
  newSl: BigNumber;
}
export type OpenLimitUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  OpenLimitUpdatedEventObject
>;

export type OpenLimitUpdatedEventFilter =
  TypedEventFilter<OpenLimitUpdatedEvent>;

export interface PausedEventObject {
  paused: boolean;
}
export type PausedEvent = TypedEvent<[boolean], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SlUpdateInitiatedEventObject {
  trader: string;
  pairIndex: BigNumber;
  index: BigNumber;
  newSl: BigNumber;
  orderId: BigNumber;
}
export type SlUpdateInitiatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  SlUpdateInitiatedEventObject
>;

export type SlUpdateInitiatedEventFilter =
  TypedEventFilter<SlUpdateInitiatedEvent>;

export interface SlUpdatedEventObject {
  trader: string;
  pairIndex: BigNumber;
  index: BigNumber;
  newSl: BigNumber;
}
export type SlUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SlUpdatedEventObject
>;

export type SlUpdatedEventFilter = TypedEventFilter<SlUpdatedEvent>;

export interface TpUpdatedEventObject {
  trader: string;
  pairIndex: BigNumber;
  index: BigNumber;
  newTp: BigNumber;
}
export type TpUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  TpUpdatedEventObject
>;

export type TpUpdatedEventFilter = TypedEventFilter<TpUpdatedEvent>;

export interface GNSTradingV6_1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GNSTradingV6_1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelOpenLimitOrder(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeTradeMarket(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    done(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeCancelOpenLimitOrder(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeCloseTradeMarket(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeLimitOrder(
      condition: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeOpenTrade(
      t: StorageInterfaceV5.TradeStruct,
      _type: PromiseOrValue<BigNumberish>,
      _slippageP: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTradeOrder(
      condition: PromiseOrValue<BigNumberish>,
      _orderType: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTotalUsers(overrides?: CallOverrides): Promise<[string[]]>;

    isDone(overrides?: CallOverrides): Promise<[boolean]>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    limitOrdersTimelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketOrdersTimeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPosDai(overrides?: CallOverrides): Promise<[BigNumber]>;

    openTrade(
      t: StorageInterfaceV5.TradeStruct,
      _type: PromiseOrValue<BigNumberish>,
      _slippageP: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLimitOrdersTimelock(
      _blocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketOrdersTimeout(
      _marketOrdersTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxPosDai(
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalUsers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateOpenLimitOrder(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _tp: PromiseOrValue<BigNumberish>,
      _sl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSl(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newSl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStorage(
      _storageT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTp(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newTp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    user(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  cancelOpenLimitOrder(
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeTradeMarket(
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeTradeMarketTimeout(
    _order: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  done(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeCancelOpenLimitOrder(
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeCloseTradeMarket(
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeLimitOrder(
    condition: PromiseOrValue<BigNumberish>,
    _trader: PromiseOrValue<string>,
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeOpenTrade(
    t: StorageInterfaceV5.TradeStruct,
    _type: PromiseOrValue<BigNumberish>,
    _slippageP: PromiseOrValue<BigNumberish>,
    _referral: PromiseOrValue<string>,
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTradeOrder(
    condition: PromiseOrValue<BigNumberish>,
    _orderType: PromiseOrValue<BigNumberish>,
    _trader: PromiseOrValue<string>,
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTotalUsers(overrides?: CallOverrides): Promise<string[]>;

  isDone(overrides?: CallOverrides): Promise<boolean>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  limitOrdersTimelock(overrides?: CallOverrides): Promise<BigNumber>;

  marketOrdersTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  maxPosDai(overrides?: CallOverrides): Promise<BigNumber>;

  openTrade(
    t: StorageInterfaceV5.TradeStruct,
    _type: PromiseOrValue<BigNumberish>,
    _slippageP: PromiseOrValue<BigNumberish>,
    _referral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openTradeMarketTimeout(
    _order: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLimitOrdersTimelock(
    _blocks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketOrdersTimeout(
    _marketOrdersTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxPosDai(
    _max: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalUsers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  updateOpenLimitOrder(
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _tp: PromiseOrValue<BigNumberish>,
    _sl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSl(
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _newSl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStorage(
    _storageT: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTp(
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _newTp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  user(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    cancelOpenLimitOrder(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTradeMarket(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    done(overrides?: CallOverrides): Promise<void>;

    executeCancelOpenLimitOrder(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeCloseTradeMarket(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeLimitOrder(
      condition: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeOpenTrade(
      t: StorageInterfaceV5.TradeStruct,
      _type: PromiseOrValue<BigNumberish>,
      _slippageP: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTradeOrder(
      condition: PromiseOrValue<BigNumberish>,
      _orderType: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getTotalUsers(overrides?: CallOverrides): Promise<string[]>;

    isDone(overrides?: CallOverrides): Promise<boolean>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    limitOrdersTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    marketOrdersTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    maxPosDai(overrides?: CallOverrides): Promise<BigNumber>;

    openTrade(
      t: StorageInterfaceV5.TradeStruct,
      _type: PromiseOrValue<BigNumberish>,
      _slippageP: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    openTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    setLimitOrdersTimelock(
      _blocks: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketOrdersTimeout(
      _marketOrdersTimeout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPosDai(
      _max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalUsers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateOpenLimitOrder(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _tp: PromiseOrValue<BigNumberish>,
      _sl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSl(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newSl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStorage(
      _storageT: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTp(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newTp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    user(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddressUpdated(string,address)"(
      name?: null,
      a?: null
    ): AddressUpdatedEventFilter;
    AddressUpdated(name?: null, a?: null): AddressUpdatedEventFilter;

    "ChainlinkCallbackTimeout(uint256,tuple)"(
      orderId?: null,
      order?: null
    ): ChainlinkCallbackTimeoutEventFilter;
    ChainlinkCallbackTimeout(
      orderId?: null,
      order?: null
    ): ChainlinkCallbackTimeoutEventFilter;

    "CouldNotCloseTrade(address,uint256,uint256)"(
      trader?: null,
      pairIndex?: null,
      index?: null
    ): CouldNotCloseTradeEventFilter;
    CouldNotCloseTrade(
      trader?: null,
      pairIndex?: null,
      index?: null
    ): CouldNotCloseTradeEventFilter;

    "Done(bool)"(done?: null): DoneEventFilter;
    Done(done?: null): DoneEventFilter;

    "MarketOrderInitiated(address,uint256,bool,uint256)"(
      trader?: null,
      pairIndex?: null,
      open?: null,
      orderId?: null
    ): MarketOrderInitiatedEventFilter;
    MarketOrderInitiated(
      trader?: null,
      pairIndex?: null,
      open?: null,
      orderId?: null
    ): MarketOrderInitiatedEventFilter;

    "NumberUpdated(string,uint256)"(
      name?: null,
      value?: null
    ): NumberUpdatedEventFilter;
    NumberUpdated(name?: null, value?: null): NumberUpdatedEventFilter;

    "OpenLimitCanceled(address,uint256,uint256)"(
      trader?: null,
      pairIndex?: null,
      index?: null
    ): OpenLimitCanceledEventFilter;
    OpenLimitCanceled(
      trader?: null,
      pairIndex?: null,
      index?: null
    ): OpenLimitCanceledEventFilter;

    "OpenLimitPlaced(address,uint256,uint256)"(
      trader?: null,
      pairIndex?: null,
      index?: null
    ): OpenLimitPlacedEventFilter;
    OpenLimitPlaced(
      trader?: null,
      pairIndex?: null,
      index?: null
    ): OpenLimitPlacedEventFilter;

    "OpenLimitUpdated(address,uint256,uint256,uint256,uint256,uint256)"(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newPrice?: null,
      newTp?: null,
      newSl?: null
    ): OpenLimitUpdatedEventFilter;
    OpenLimitUpdated(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newPrice?: null,
      newTp?: null,
      newSl?: null
    ): OpenLimitUpdatedEventFilter;

    "Paused(bool)"(paused?: null): PausedEventFilter;
    Paused(paused?: null): PausedEventFilter;

    "SlUpdateInitiated(address,uint256,uint256,uint256,uint256)"(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newSl?: null,
      orderId?: null
    ): SlUpdateInitiatedEventFilter;
    SlUpdateInitiated(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newSl?: null,
      orderId?: null
    ): SlUpdateInitiatedEventFilter;

    "SlUpdated(address,uint256,uint256,uint256)"(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newSl?: null
    ): SlUpdatedEventFilter;
    SlUpdated(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newSl?: null
    ): SlUpdatedEventFilter;

    "TpUpdated(address,uint256,uint256,uint256)"(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newTp?: null
    ): TpUpdatedEventFilter;
    TpUpdated(
      trader?: null,
      pairIndex?: null,
      index?: null,
      newTp?: null
    ): TpUpdatedEventFilter;
  };

  estimateGas: {
    cancelOpenLimitOrder(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeTradeMarket(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    done(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeCancelOpenLimitOrder(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeCloseTradeMarket(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeLimitOrder(
      condition: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeOpenTrade(
      t: StorageInterfaceV5.TradeStruct,
      _type: PromiseOrValue<BigNumberish>,
      _slippageP: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTradeOrder(
      condition: PromiseOrValue<BigNumberish>,
      _orderType: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTotalUsers(overrides?: CallOverrides): Promise<BigNumber>;

    isDone(overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    limitOrdersTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    marketOrdersTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    maxPosDai(overrides?: CallOverrides): Promise<BigNumber>;

    openTrade(
      t: StorageInterfaceV5.TradeStruct,
      _type: PromiseOrValue<BigNumberish>,
      _slippageP: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLimitOrdersTimelock(
      _blocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketOrdersTimeout(
      _marketOrdersTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxPosDai(
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalUsers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateOpenLimitOrder(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _tp: PromiseOrValue<BigNumberish>,
      _sl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSl(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newSl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStorage(
      _storageT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTp(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newTp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    user(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOpenLimitOrder(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeTradeMarket(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    done(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeCancelOpenLimitOrder(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeCloseTradeMarket(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeLimitOrder(
      condition: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeOpenTrade(
      t: StorageInterfaceV5.TradeStruct,
      _type: PromiseOrValue<BigNumberish>,
      _slippageP: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTradeOrder(
      condition: PromiseOrValue<BigNumberish>,
      _orderType: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTotalUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDone(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitOrdersTimelock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketOrdersTimeout(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPosDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openTrade(
      t: StorageInterfaceV5.TradeStruct,
      _type: PromiseOrValue<BigNumberish>,
      _slippageP: PromiseOrValue<BigNumberish>,
      _referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLimitOrdersTimelock(
      _blocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketOrdersTimeout(
      _marketOrdersTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPosDai(
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalUsers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateOpenLimitOrder(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _tp: PromiseOrValue<BigNumberish>,
      _sl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSl(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newSl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStorage(
      _storageT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTp(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newTp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    user(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
