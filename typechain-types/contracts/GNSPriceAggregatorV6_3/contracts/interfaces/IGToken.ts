/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IGToken {
  export type LockedDepositStruct = {
    owner: PromiseOrValue<string>;
    shares: PromiseOrValue<BigNumberish>;
    assetsDeposited: PromiseOrValue<BigNumberish>;
    assetsDiscount: PromiseOrValue<BigNumberish>;
    atTimestamp: PromiseOrValue<BigNumberish>;
    lockDuration: PromiseOrValue<BigNumberish>;
  };

  export type LockedDepositStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    shares: BigNumber;
    assetsDeposited: BigNumber;
    assetsDiscount: BigNumber;
    atTimestamp: BigNumber;
    lockDuration: BigNumber;
  };
}

export interface IGTokenInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "currentBalanceDai()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "currentEpochPositiveOpenPnl()": FunctionFragment;
    "currentEpochStart()": FunctionFragment;
    "distributeReward(uint256)": FunctionFragment;
    "getLockedDeposit(uint256)": FunctionFragment;
    "manager()": FunctionFragment;
    "receiveAssets(uint256,address)": FunctionFragment;
    "sendAssets(uint256,address)": FunctionFragment;
    "updateAccPnlPerTokenUsed(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "currentBalanceDai"
      | "currentEpoch"
      | "currentEpochPositiveOpenPnl"
      | "currentEpochStart"
      | "distributeReward"
      | "getLockedDeposit"
      | "manager"
      | "receiveAssets"
      | "sendAssets"
      | "updateAccPnlPerTokenUsed"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentBalanceDai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpochPositiveOpenPnl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpochStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveAssets",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendAssets",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccPnlPerTokenUsed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentBalanceDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpochPositiveOpenPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpochStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAccPnlPerTokenUsed",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    currentBalanceDai(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEpochPositiveOpenPnl(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentEpochStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributeReward(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLockedDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IGToken.LockedDepositStructOutput]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    receiveAssets(
      assets: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendAssets(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAccPnlPerTokenUsed(
      prevPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      newPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  currentBalanceDai(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpochPositiveOpenPnl(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpochStart(overrides?: CallOverrides): Promise<BigNumber>;

  distributeReward(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLockedDeposit(
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IGToken.LockedDepositStructOutput>;

  manager(overrides?: CallOverrides): Promise<string>;

  receiveAssets(
    assets: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendAssets(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAccPnlPerTokenUsed(
    prevPositiveOpenPnl: PromiseOrValue<BigNumberish>,
    newPositiveOpenPnl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    currentBalanceDai(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochPositiveOpenPnl(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochStart(overrides?: CallOverrides): Promise<BigNumber>;

    distributeReward(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getLockedDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IGToken.LockedDepositStructOutput>;

    manager(overrides?: CallOverrides): Promise<string>;

    receiveAssets(
      assets: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendAssets(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAccPnlPerTokenUsed(
      prevPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      newPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    currentBalanceDai(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochPositiveOpenPnl(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochStart(overrides?: CallOverrides): Promise<BigNumber>;

    distributeReward(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLockedDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    receiveAssets(
      assets: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendAssets(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAccPnlPerTokenUsed(
      prevPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      newPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentBalanceDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpochPositiveOpenPnl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEpochStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeReward(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLockedDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveAssets(
      assets: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendAssets(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAccPnlPerTokenUsed(
      prevPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      newPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
