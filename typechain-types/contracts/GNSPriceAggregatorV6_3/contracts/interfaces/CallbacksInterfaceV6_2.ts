/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace CallbacksInterfaceV6_2 {
  export type AggregatorAnswerStruct = {
    orderId: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    spreadP: PromiseOrValue<BigNumberish>;
  };

  export type AggregatorAnswerStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & { orderId: BigNumber; price: BigNumber; spreadP: BigNumber };
}

export interface CallbacksInterfaceV6_2Interface extends utils.Interface {
  functions: {
    "closeTradeMarketCallback((uint256,uint256,uint256))": FunctionFragment;
    "openTradeMarketCallback((uint256,uint256,uint256))": FunctionFragment;
    "updateSlCallback((uint256,uint256,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "closeTradeMarketCallback"
      | "openTradeMarketCallback"
      | "updateSlCallback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "closeTradeMarketCallback",
    values: [CallbacksInterfaceV6_2.AggregatorAnswerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "openTradeMarketCallback",
    values: [CallbacksInterfaceV6_2.AggregatorAnswerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSlCallback",
    values: [CallbacksInterfaceV6_2.AggregatorAnswerStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "closeTradeMarketCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openTradeMarketCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSlCallback",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CallbacksInterfaceV6_2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CallbacksInterfaceV6_2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    closeTradeMarketCallback(
      arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openTradeMarketCallback(
      arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSlCallback(
      arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  closeTradeMarketCallback(
    arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openTradeMarketCallback(
    arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSlCallback(
    arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    closeTradeMarketCallback(
      arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    openTradeMarketCallback(
      arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSlCallback(
      arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    closeTradeMarketCallback(
      arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openTradeMarketCallback(
      arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSlCallback(
      arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closeTradeMarketCallback(
      arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openTradeMarketCallback(
      arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSlCallback(
      arg0: CallbacksInterfaceV6_2.AggregatorAnswerStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
