/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace GNSPriceAggregatorV6_3 {
  export type PendingSlStruct = {
    trader: PromiseOrValue<string>;
    pairIndex: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    openPrice: PromiseOrValue<BigNumberish>;
    buy: PromiseOrValue<boolean>;
    newSl: PromiseOrValue<BigNumberish>;
  };

  export type PendingSlStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    trader: string;
    pairIndex: BigNumber;
    index: BigNumber;
    openPrice: BigNumber;
    buy: boolean;
    newSl: BigNumber;
  };
}

export interface GNSPriceAggregatorV6_3Interface extends utils.Interface {
  functions: {
    "addNode(address)": FunctionFragment;
    "claimBackLink()": FunctionFragment;
    "fulfill(bytes32,uint256)": FunctionFragment;
    "getPrice(uint256,uint8,uint256)": FunctionFragment;
    "linkFee(uint256,uint256)": FunctionFragment;
    "linkPriceFeed()": FunctionFragment;
    "minAnswers()": FunctionFragment;
    "nodes(uint256)": FunctionFragment;
    "openFeeP(uint256)": FunctionFragment;
    "orderIdByRequest(bytes32)": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "ordersAnswers(uint256,uint256)": FunctionFragment;
    "pairsStorage()": FunctionFragment;
    "pendingSlOrders(uint256)": FunctionFragment;
    "removeNode(uint256)": FunctionFragment;
    "replaceNode(uint256,address)": FunctionFragment;
    "storageT()": FunctionFragment;
    "storePendingSlOrder(uint256,(address,uint256,uint256,uint256,bool,uint256))": FunctionFragment;
    "unregisterPendingSlOrder(uint256)": FunctionFragment;
    "updateLinkPriceFeed(address)": FunctionFragment;
    "updateMinAnswers(uint256)": FunctionFragment;
    "updatePairsStorage(address)": FunctionFragment;
    "updateStorage(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addNode"
      | "claimBackLink"
      | "fulfill"
      | "getPrice"
      | "linkFee"
      | "linkPriceFeed"
      | "minAnswers"
      | "nodes"
      | "openFeeP"
      | "orderIdByRequest"
      | "orders"
      | "ordersAnswers"
      | "pairsStorage"
      | "pendingSlOrders"
      | "removeNode"
      | "replaceNode"
      | "storageT"
      | "storePendingSlOrder"
      | "unregisterPendingSlOrder"
      | "updateLinkPriceFeed"
      | "updateMinAnswers"
      | "updatePairsStorage"
      | "updateStorage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBackLink",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "linkFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "linkPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAnswers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nodes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openFeeP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "orderIdByRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ordersAnswers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pairsStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingSlOrders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeNode",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceNode",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "storageT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "storePendingSlOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      GNSPriceAggregatorV6_3.PendingSlStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterPendingSlOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLinkPriceFeed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinAnswers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePairsStorage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStorage",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimBackLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "linkFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minAnswers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nodes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openFeeP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderIdByRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ordersAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairsStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingSlOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "replaceNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "storageT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storePendingSlOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterPendingSlOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLinkPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePairsStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStorage",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "LinkPriceFeedUpdated(address)": EventFragment;
    "MinAnswersUpdated(uint256)": EventFragment;
    "NodeAdded(uint256,address)": EventFragment;
    "NodeRemoved(uint256,address)": EventFragment;
    "NodeReplaced(uint256,address,address)": EventFragment;
    "PairsStorageUpdated(address)": EventFragment;
    "PriceReceived(bytes32,uint256,address,uint256,uint256,uint256,uint256)": EventFragment;
    "PriceRequested(uint256,bytes32,uint256,uint8,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkPriceFeedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinAnswersUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeReplaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairsStorageUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceRequested"): EventFragment;
}

export interface ChainlinkCancelledEventObject {
  id: string;
}
export type ChainlinkCancelledEvent = TypedEvent<
  [string],
  ChainlinkCancelledEventObject
>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export interface ChainlinkFulfilledEventObject {
  id: string;
}
export type ChainlinkFulfilledEvent = TypedEvent<
  [string],
  ChainlinkFulfilledEventObject
>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export interface ChainlinkRequestedEventObject {
  id: string;
}
export type ChainlinkRequestedEvent = TypedEvent<
  [string],
  ChainlinkRequestedEventObject
>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export interface LinkPriceFeedUpdatedEventObject {
  value: string;
}
export type LinkPriceFeedUpdatedEvent = TypedEvent<
  [string],
  LinkPriceFeedUpdatedEventObject
>;

export type LinkPriceFeedUpdatedEventFilter =
  TypedEventFilter<LinkPriceFeedUpdatedEvent>;

export interface MinAnswersUpdatedEventObject {
  value: BigNumber;
}
export type MinAnswersUpdatedEvent = TypedEvent<
  [BigNumber],
  MinAnswersUpdatedEventObject
>;

export type MinAnswersUpdatedEventFilter =
  TypedEventFilter<MinAnswersUpdatedEvent>;

export interface NodeAddedEventObject {
  index: BigNumber;
  value: string;
}
export type NodeAddedEvent = TypedEvent<
  [BigNumber, string],
  NodeAddedEventObject
>;

export type NodeAddedEventFilter = TypedEventFilter<NodeAddedEvent>;

export interface NodeRemovedEventObject {
  index: BigNumber;
  oldNode: string;
}
export type NodeRemovedEvent = TypedEvent<
  [BigNumber, string],
  NodeRemovedEventObject
>;

export type NodeRemovedEventFilter = TypedEventFilter<NodeRemovedEvent>;

export interface NodeReplacedEventObject {
  index: BigNumber;
  oldNode: string;
  newNode: string;
}
export type NodeReplacedEvent = TypedEvent<
  [BigNumber, string, string],
  NodeReplacedEventObject
>;

export type NodeReplacedEventFilter = TypedEventFilter<NodeReplacedEvent>;

export interface PairsStorageUpdatedEventObject {
  value: string;
}
export type PairsStorageUpdatedEvent = TypedEvent<
  [string],
  PairsStorageUpdatedEventObject
>;

export type PairsStorageUpdatedEventFilter =
  TypedEventFilter<PairsStorageUpdatedEvent>;

export interface PriceReceivedEventObject {
  request: string;
  orderId: BigNumber;
  node: string;
  pairIndex: BigNumber;
  price: BigNumber;
  referencePrice: BigNumber;
  linkFee: BigNumber;
}
export type PriceReceivedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber],
  PriceReceivedEventObject
>;

export type PriceReceivedEventFilter = TypedEventFilter<PriceReceivedEvent>;

export interface PriceRequestedEventObject {
  orderId: BigNumber;
  job: string;
  pairIndex: BigNumber;
  orderType: number;
  nodesCount: BigNumber;
  linkFeePerNode: BigNumber;
}
export type PriceRequestedEvent = TypedEvent<
  [BigNumber, string, BigNumber, number, BigNumber, BigNumber],
  PriceRequestedEventObject
>;

export type PriceRequestedEventFilter = TypedEventFilter<PriceRequestedEvent>;

export interface GNSPriceAggregatorV6_3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GNSPriceAggregatorV6_3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNode(
      a: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimBackLink(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fulfill(
      requestId: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPrice(
      pairIndex: PromiseOrValue<BigNumberish>,
      orderType: PromiseOrValue<BigNumberish>,
      leveragedPosDai: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    linkFee(
      pairIndex: PromiseOrValue<BigNumberish>,
      leveragedPosDai: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    linkPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    minAnswers(overrides?: CallOverrides): Promise<[BigNumber]>;

    nodes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    openFeeP(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orderIdByRequest(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, boolean] & {
        pairIndex: BigNumber;
        orderType: number;
        linkFeePerNode: BigNumber;
        initiated: boolean;
      }
    >;

    ordersAnswers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pairsStorage(overrides?: CallOverrides): Promise<[string]>;

    pendingSlOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        trader: string;
        pairIndex: BigNumber;
        index: BigNumber;
        openPrice: BigNumber;
        buy: boolean;
        newSl: BigNumber;
      }
    >;

    removeNode(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replaceNode(
      index: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storageT(overrides?: CallOverrides): Promise<[string]>;

    storePendingSlOrder(
      orderId: PromiseOrValue<BigNumberish>,
      p: GNSPriceAggregatorV6_3.PendingSlStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterPendingSlOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLinkPriceFeed(
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMinAnswers(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePairsStorage(
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStorage(
      _storageT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addNode(
    a: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimBackLink(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fulfill(
    requestId: PromiseOrValue<BytesLike>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPrice(
    pairIndex: PromiseOrValue<BigNumberish>,
    orderType: PromiseOrValue<BigNumberish>,
    leveragedPosDai: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  linkFee(
    pairIndex: PromiseOrValue<BigNumberish>,
    leveragedPosDai: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  linkPriceFeed(overrides?: CallOverrides): Promise<string>;

  minAnswers(overrides?: CallOverrides): Promise<BigNumber>;

  nodes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  openFeeP(
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  orderIdByRequest(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  orders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, boolean] & {
      pairIndex: BigNumber;
      orderType: number;
      linkFeePerNode: BigNumber;
      initiated: boolean;
    }
  >;

  ordersAnswers(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pairsStorage(overrides?: CallOverrides): Promise<string>;

  pendingSlOrders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      trader: string;
      pairIndex: BigNumber;
      index: BigNumber;
      openPrice: BigNumber;
      buy: boolean;
      newSl: BigNumber;
    }
  >;

  removeNode(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replaceNode(
    index: PromiseOrValue<BigNumberish>,
    a: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storageT(overrides?: CallOverrides): Promise<string>;

  storePendingSlOrder(
    orderId: PromiseOrValue<BigNumberish>,
    p: GNSPriceAggregatorV6_3.PendingSlStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterPendingSlOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLinkPriceFeed(
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMinAnswers(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePairsStorage(
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStorage(
    _storageT: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addNode(
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBackLink(overrides?: CallOverrides): Promise<void>;

    fulfill(
      requestId: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPrice(
      pairIndex: PromiseOrValue<BigNumberish>,
      orderType: PromiseOrValue<BigNumberish>,
      leveragedPosDai: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkFee(
      pairIndex: PromiseOrValue<BigNumberish>,
      leveragedPosDai: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkPriceFeed(overrides?: CallOverrides): Promise<string>;

    minAnswers(overrides?: CallOverrides): Promise<BigNumber>;

    nodes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    openFeeP(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderIdByRequest(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, boolean] & {
        pairIndex: BigNumber;
        orderType: number;
        linkFeePerNode: BigNumber;
        initiated: boolean;
      }
    >;

    ordersAnswers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairsStorage(overrides?: CallOverrides): Promise<string>;

    pendingSlOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        trader: string;
        pairIndex: BigNumber;
        index: BigNumber;
        openPrice: BigNumber;
        buy: boolean;
        newSl: BigNumber;
      }
    >;

    removeNode(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    replaceNode(
      index: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    storageT(overrides?: CallOverrides): Promise<string>;

    storePendingSlOrder(
      orderId: PromiseOrValue<BigNumberish>,
      p: GNSPriceAggregatorV6_3.PendingSlStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterPendingSlOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLinkPriceFeed(
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinAnswers(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePairsStorage(
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStorage(
      _storageT: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChainlinkCancelled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;

    "LinkPriceFeedUpdated(address)"(
      value?: null
    ): LinkPriceFeedUpdatedEventFilter;
    LinkPriceFeedUpdated(value?: null): LinkPriceFeedUpdatedEventFilter;

    "MinAnswersUpdated(uint256)"(value?: null): MinAnswersUpdatedEventFilter;
    MinAnswersUpdated(value?: null): MinAnswersUpdatedEventFilter;

    "NodeAdded(uint256,address)"(
      index?: null,
      value?: null
    ): NodeAddedEventFilter;
    NodeAdded(index?: null, value?: null): NodeAddedEventFilter;

    "NodeRemoved(uint256,address)"(
      index?: null,
      oldNode?: null
    ): NodeRemovedEventFilter;
    NodeRemoved(index?: null, oldNode?: null): NodeRemovedEventFilter;

    "NodeReplaced(uint256,address,address)"(
      index?: null,
      oldNode?: null,
      newNode?: null
    ): NodeReplacedEventFilter;
    NodeReplaced(
      index?: null,
      oldNode?: null,
      newNode?: null
    ): NodeReplacedEventFilter;

    "PairsStorageUpdated(address)"(
      value?: null
    ): PairsStorageUpdatedEventFilter;
    PairsStorageUpdated(value?: null): PairsStorageUpdatedEventFilter;

    "PriceReceived(bytes32,uint256,address,uint256,uint256,uint256,uint256)"(
      request?: null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      node?: PromiseOrValue<string> | null,
      pairIndex?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      referencePrice?: null,
      linkFee?: null
    ): PriceReceivedEventFilter;
    PriceReceived(
      request?: null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      node?: PromiseOrValue<string> | null,
      pairIndex?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      referencePrice?: null,
      linkFee?: null
    ): PriceReceivedEventFilter;

    "PriceRequested(uint256,bytes32,uint256,uint8,uint256,uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      job?: PromiseOrValue<BytesLike> | null,
      pairIndex?: PromiseOrValue<BigNumberish> | null,
      orderType?: null,
      nodesCount?: null,
      linkFeePerNode?: null
    ): PriceRequestedEventFilter;
    PriceRequested(
      orderId?: PromiseOrValue<BigNumberish> | null,
      job?: PromiseOrValue<BytesLike> | null,
      pairIndex?: PromiseOrValue<BigNumberish> | null,
      orderType?: null,
      nodesCount?: null,
      linkFeePerNode?: null
    ): PriceRequestedEventFilter;
  };

  estimateGas: {
    addNode(
      a: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimBackLink(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fulfill(
      requestId: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPrice(
      pairIndex: PromiseOrValue<BigNumberish>,
      orderType: PromiseOrValue<BigNumberish>,
      leveragedPosDai: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    linkFee(
      pairIndex: PromiseOrValue<BigNumberish>,
      leveragedPosDai: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    minAnswers(overrides?: CallOverrides): Promise<BigNumber>;

    nodes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openFeeP(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderIdByRequest(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ordersAnswers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairsStorage(overrides?: CallOverrides): Promise<BigNumber>;

    pendingSlOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeNode(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replaceNode(
      index: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storageT(overrides?: CallOverrides): Promise<BigNumber>;

    storePendingSlOrder(
      orderId: PromiseOrValue<BigNumberish>,
      p: GNSPriceAggregatorV6_3.PendingSlStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterPendingSlOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLinkPriceFeed(
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMinAnswers(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePairsStorage(
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStorage(
      _storageT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNode(
      a: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimBackLink(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fulfill(
      requestId: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPrice(
      pairIndex: PromiseOrValue<BigNumberish>,
      orderType: PromiseOrValue<BigNumberish>,
      leveragedPosDai: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    linkFee(
      pairIndex: PromiseOrValue<BigNumberish>,
      leveragedPosDai: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAnswers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nodes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openFeeP(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderIdByRequest(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ordersAnswers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairsStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingSlOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeNode(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replaceNode(
      index: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storageT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    storePendingSlOrder(
      orderId: PromiseOrValue<BigNumberish>,
      p: GNSPriceAggregatorV6_3.PendingSlStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterPendingSlOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLinkPriceFeed(
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMinAnswers(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePairsStorage(
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStorage(
      _storageT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
