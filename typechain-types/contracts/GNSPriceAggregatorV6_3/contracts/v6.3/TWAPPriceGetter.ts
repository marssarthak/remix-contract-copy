/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface TWAPPriceGetterInterface extends utils.Interface {
  functions: {
    "isGnsToken0InLp()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenPriceDai()": FunctionFragment;
    "twapInterval()": FunctionFragment;
    "uniV3Pool()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isGnsToken0InLp"
      | "token"
      | "tokenPriceDai"
      | "twapInterval"
      | "uniV3Pool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isGnsToken0InLp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenPriceDai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "twapInterval",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "uniV3Pool", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "isGnsToken0InLp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenPriceDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uniV3Pool", data: BytesLike): Result;

  events: {
    "TwapIntervalUpdated(uint32)": EventFragment;
    "UniV3PoolUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TwapIntervalUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniV3PoolUpdated"): EventFragment;
}

export interface TwapIntervalUpdatedEventObject {
  newValue: number;
}
export type TwapIntervalUpdatedEvent = TypedEvent<
  [number],
  TwapIntervalUpdatedEventObject
>;

export type TwapIntervalUpdatedEventFilter =
  TypedEventFilter<TwapIntervalUpdatedEvent>;

export interface UniV3PoolUpdatedEventObject {
  newValue: string;
}
export type UniV3PoolUpdatedEvent = TypedEvent<
  [string],
  UniV3PoolUpdatedEventObject
>;

export type UniV3PoolUpdatedEventFilter =
  TypedEventFilter<UniV3PoolUpdatedEvent>;

export interface TWAPPriceGetter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TWAPPriceGetterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isGnsToken0InLp(overrides?: CallOverrides): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenPriceDai(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    twapInterval(overrides?: CallOverrides): Promise<[number]>;

    uniV3Pool(overrides?: CallOverrides): Promise<[string]>;
  };

  isGnsToken0InLp(overrides?: CallOverrides): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenPriceDai(overrides?: CallOverrides): Promise<BigNumber>;

  twapInterval(overrides?: CallOverrides): Promise<number>;

  uniV3Pool(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    isGnsToken0InLp(overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenPriceDai(overrides?: CallOverrides): Promise<BigNumber>;

    twapInterval(overrides?: CallOverrides): Promise<number>;

    uniV3Pool(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "TwapIntervalUpdated(uint32)"(
      newValue?: null
    ): TwapIntervalUpdatedEventFilter;
    TwapIntervalUpdated(newValue?: null): TwapIntervalUpdatedEventFilter;

    "UniV3PoolUpdated(address)"(newValue?: null): UniV3PoolUpdatedEventFilter;
    UniV3PoolUpdated(newValue?: null): UniV3PoolUpdatedEventFilter;
  };

  estimateGas: {
    isGnsToken0InLp(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPriceDai(overrides?: CallOverrides): Promise<BigNumber>;

    twapInterval(overrides?: CallOverrides): Promise<BigNumber>;

    uniV3Pool(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isGnsToken0InLp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPriceDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    twapInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniV3Pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
