/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  GNSPairInfosInterfaceV6,
  GNSPairInfosInterfaceV6Interface,
} from "../../../contracts/GNSTradingV6_1.sol/GNSPairInfosInterfaceV6";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "pairIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "openPrice",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "long",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "collateral",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "leverage",
        type: "uint256",
      },
    ],
    name: "getTradeLiquidationPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "openPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pairIndex",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "long",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "openInterest",
        type: "uint256",
      },
    ],
    name: "getTradePriceImpact",
    outputs: [
      {
        internalType: "uint256",
        name: "priceImpactP",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "priceAfterImpact",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "pairIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "long",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "collateral",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "leverage",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "percentProfit",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "closingFee",
        type: "uint256",
      },
    ],
    name: "getTradeValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "maxNegativePnlOnOpenP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "pairIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "long",
        type: "bool",
      },
    ],
    name: "storeTradeInitialAccFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class GNSPairInfosInterfaceV6__factory {
  static readonly abi = _abi;
  static createInterface(): GNSPairInfosInterfaceV6Interface {
    return new utils.Interface(_abi) as GNSPairInfosInterfaceV6Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GNSPairInfosInterfaceV6 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GNSPairInfosInterfaceV6;
  }
}
